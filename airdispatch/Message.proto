package airdispatch;

// THIS IS THE SAMPLE PROTOBUF DOCUMENT DESCRIBING THE PROTOCOL.
// THIS IS SUBJECT TO CHANGE AT ANY TIME UP UNTIL RELEASE.
// WE ARE STILL WORKING ON THE PROTOCOL AND HOPE TO RELEASE A
// WORKING VERSION IN MAY.

// ALL MESSAGES BEGIN WITH THE BYTES 'AD' IN ASCII TO SPECIFY 'AIRDISPATCH'
// ALL MESSAGES ARE PREFIXED WITH 2 BYTES THAT SPECIFY THE MESSAGE LENGTH
// IN BIG-ENDIAN FORMAT.

// ----------------
// Tracker Messages
// ----------------

// REG - Used to register an address's location with the tracker.
message AddressRegistration {
	required string address = 1;
	required bytes public_key = 2;
	required string location = 3;
	optional string username = 4;
}

// QUE - Used to query the mailserver for the location of the address.
message AddressRequest {
	required string address = 1;
	optional bool need_key = 2;
}

// RES - Sent from the Tracker contains the location of the address.
message AddressResponse {
	required string server_location = 1;
	optional bytes public_key = 2;
	required string address = 3;
}

// --------------------
// Mail Server Messages
// --------------------

// SEN - Used to request that a MailServer forward mail on one's behalf.
message SendMailRequest {
	repeated string to_address = 1;
	required Mail stored_message = 2;
}

// ALE - Used to alert a neighboring mailserver that you are holding mail for one of its users.
message Alert {
	optional string to_address = 1;
	optional string location = 2;
	optional string message_id = 3;
	optional bool update_alert = 4;
	optional string update_message_id = 5;
}

// RET - Used to download messages from a mailserver.
message RetrieveData {
	optional string message_id = 1;
	optional string since_date = 2;
	optional string filter_options = 3;
}

// ----------------
// Mail Data Format
// ----------------

// MAI - Used to store an encrypted message
message Mail {
	required string from_address = 1; // The Address of the Sending User
	required string encryption = 2; // The Encryption Algorithim of the Message
	required bytes data = 3; // The Encrypted Data
}

message MailData {
	repeated MailData.DataType payload = 1;

	message DataType {
		required string type_name = 1; // The Type of the Data being Sent
		required bytes payload = 2; // The Data
		optional string encryption = 3; // The Optional Additional/Seperate Encryption of this Data Segment
	}
}

// ---------------------
// Protocol Helper Types
// ---------------------

message SignedMessage {
	required bytes payload = 1;
	optional bytes signing_key = 2;
	
	required Signature signature = 3;
	
	optional string message_type = 4;
	optional string signature_function = 5;
}

message Signature {
	required bytes r = 1;
	required bytes s = 2;
}
